global proc importBrick(string $node, string $brickObj, string $attrArr, string $brickGrp, string $instGrp) {
  string $importArr[] = file("-import", "-rnn", "/Users/kathrynmiller/Documents/MayaPlugins/BOBPlugin/brick-optimization-builder/src/objs/" + $brickObj);
  //string $importArr[] = file("-import", "-rnn", "/Users/dzungnguyen/OneDrive - PennO365/classes/cis660/brick-optimization-builder/src/objs/" + $brickObj);
  for($brick in $importArr) {
      if (`nodeType $brick` == "transform" ) {

          string $instancer = instancer();
          connectAttr ($brick + ".matrix") ($instancer + ".inputHierarchy[0]");
          connectAttr ($node + "." + $attrArr) ($instancer + ".inputPoints");

          // organize in outliner and return
          parent $brick $brickGrp;
          parent $instancer $instGrp;
          return;
      }
  }
}

global proc setTextureAttr(string $bob, string $mesh) {
    // get texture file name if any and set attr on node
    string $shapes[] = listRelatives("-shapes", $mesh);
    string $shape = $shapes[0];
    string $shadeEng1[] = listConnections("-type", "shadingEngine", $shape);
    string $materials[] = ls("-materials", "true", listConnections($shadeEng1[0]));
      
    // check if this is an arnold or maya node
    if(attributeExists("baseColor", $materials[0])) {
      string $fileNode[] = listConnections("-type", "file", $materials[0] + ".baseColor");
      setAttr ($bob + ".meshTexture") -type "string" ($materials[0] + ".baseColor"); 
        if(size($fileNode) > 0) {
          //string $currentFile = getAttr($fileNode[0] + ".fileTextureName");
          setAttr ($bob + ".meshTexture") -type "string" $fileNode[0]; 
          //setAttr ($bob + ".meshTexture") -type "string" ($materials[0] + ".baseColor"); 
        } else {
            print "no texture file";
        }   
    } else {
        string $fileNode[] = listConnections("-type", "file", $materials[0] + ".color");
        setAttr ($bob + ".meshTexture") -type "string" ($materials[0] + ".color"); 
        if(size($fileNode) > 0) {
            //string $currentFile = getAttr($fileNode[0] + ".fileTextureName");
            setAttr ($bob + ".meshTexture") -type "string" $fileNode[0];  
            //setAttr ($bob + ".meshTexture") -type "string" ($materials[0] + ".color");  
        } else {
            print "no texture file";
        }  
    }
}

global proc createBOBNode() {
    string $selected[] = `ls -sl`;
    if (size($selected) == 1)
    {
        performFreezeTransformations(0);
        string $bob = createNode("BOBNode");
        string $mesh = $selected[0];
        string $instGrp = group("-em", "-name", "instancers");
        string $parentGrp = group("-em", "-name", "bricks");
        
        // Creating the target output mesh
        string $target = createNode("transform");
        string $targetMesh = createNode("mesh");
        sets -add "initialShadingGroup" $targetMesh;

        // Connect the attributes.
        connectAttr ($mesh + ".outMesh") ($bob + ".inputMesh");
        connectAttr( $bob + ".outputMesh") ($targetMesh + ".inMesh");

        // set name of mesh to be input mesh name
        setAttr ($bob + ".inputMeshName") -type "string" $mesh ;

        // set texture file path
        setTextureAttr($bob, $mesh);
        
        // import base bricks and attach to data arr attr of the node for visualization
        importBrick($bob, "1x1.obj", "oneXone", $parentGrp, $instGrp);
        importBrick($bob, "1x2.obj", "oneXtwo", $parentGrp, $instGrp);
        importBrick($bob, "1x3.obj", "oneXthree", $parentGrp, $instGrp);
        importBrick($bob, "1x4.obj", "oneXfour", $parentGrp, $instGrp);
        importBrick($bob, "1x6.obj", "oneXsix", $parentGrp, $instGrp);
        importBrick($bob, "1x8.obj", "oneXeight", $parentGrp, $instGrp);

        importBrick($bob, "2x2.obj", "twoXtwo", $parentGrp, $instGrp);
        importBrick($bob, "2x3.obj", "twoXthree", $parentGrp, $instGrp);
        importBrick($bob, "2x4.obj", "twoXfour", $parentGrp, $instGrp);
        importBrick($bob, "2x6.obj", "twoXsix", $parentGrp, $instGrp);
        importBrick($bob, "2x8.obj", "twoXeight", $parentGrp, $instGrp);

        // hide original brick geometry
        hide($parentGrp);
    } else {
        error "Please select exactly one mesh"; 
    }
}
